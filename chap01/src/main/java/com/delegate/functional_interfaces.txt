@FunctionalInterface
public interface Predicate<T> { // take T, return Bool
    boolean test(T t);
}

public <T> List<T> filter(List<T> list, Predicate<T> p) {
    List<T> results = new ArrayList<>();
    for(T t: list) {
        if(p.test(t)) {
            results.add(t);
        }
    }
    return results;
}

Predicate<String> nonEmptyStringPredicate = (String s) -> !s.isEmpty();
List<String> nonEmpty = filter(listOfStrings, nonEmptyStringPredicate);

////////////////////////////////////////////////////////////////////////////////////////////////////////////

@FunctionalInterface
public interface Consumer<T> { // take T, return void
    void accept(T t);
}

public <T> void forEach(List<T> list, Consumer<T> c) {
    for(T t: list) {
        c.accept(t); // call System.out.println(i)
    }
}

forEach(Arrays.asList(1,2,3,4,5), (Integer i) -> System.out.println(i));

///////////////////////////////////////////////////////////////////////////////////////////////////////////

@FunctionalInterface
public interface Function<T, R> { // take T, return R
    R apply(T t):
}

public <T, R> List<R> map(List<T> list, Function<T, R> f) {
    List<R> result = new ArrayList<>();
    for(T t: list) {
        result.add(f.apply(t));
    }
    return result;
}

List<Integer> l = map(Arrays.asList("lambdas", "in", "action"), (String s) -> s.length());

///////////////////////////////////////////////////////////////////////////////////////////////////////////

for primitives use special interfaces (IntPredicate, DoublePredicate, IntConsumer, LongBinaryOperator, IntFunction and other)

public interface IntPredicate {
    boolean test(int t);
}

IntPredicate evenNumbers = (int i) -> i % 2 == 0;
evenNumbers.test(1000); // GOOD!, doesn't make autopacking!

Predicate<Integer> oddNumbers = (Integer i) -> i % 2 == 0;
oddNumbers.test(1000); // BAD!!!!!!!!, don't do it, it's make autopacking!!!!
